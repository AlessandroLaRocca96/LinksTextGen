# -*- coding: utf-8 -*-
"""ctrlBLEU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uX4fAQKzOenHcNzCPs3h1lkyF85bzCFq
"""

!git clone https://github.com/geek-ai/Texygen.git
!pip install -r /content/Texygen/requirements.txt

# Commented out IPython magic to ensure Python compatibility.
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

# %cd /content/Texygen/
from utils.metrics.Bleu import Bleu
from utils.metrics.SelfBleu import SelfBleu
import datetime

class ctrlBleu : 
  def __init__(self, generated_file_path='', reference_file_path='', gram = 3):
    self.generated_file_path = generated_file_path
    self.reference_file_path = reference_file_path
    self.gram = gram


  def getBleuScore(self):
    print(self.reference_file_path)
    BleuScore = Bleu (self.generated_file_path, self.reference_file_path,self.gram)
    #print("Bleu score with gram = %d is: %f" %(self.gram, BleuScore.get_score(is_fast=False)))
    return BleuScore.get_score(is_fast=False)

  def getSelfBleuScore(self):
    print(self.generated_file_path)
    SelfBleuScore = SelfBleu(self.generated_file_path, self.gram)
    #print("Self-Bleu score with gram = %d is: %f" %(self.gram, SelfBleuScore.get_score(is_fast=False)))
    return SelfBleuScore.get_score(is_fast=False)

  def getPosBleuScore (self): 
    generated_file = open(self.generated_file_path, 'r')
    generated_pos = open ("/content/generated_pos.txt", 'w')
    reference_pos = open('/content/reference_pos.txt', 'w')
    reference_file = open(self.reference_file_path, 'r')

    for line in generated_file:
      generated_tokenize = nltk.word_tokenize(line)
      generated = nltk.pos_tag(generated_tokenize)      
      for elem in generated : 
          generated_pos.write(elem[1] + " ")
      generated_pos.write("\n")
    generated_file.close()

    
    for line in reference_file: 
      reference_tokenize = nltk.word_tokenize(line)
      reference = nltk.pos_tag(reference_tokenize)
      for elem in reference : 
          reference_pos.write(elem[1] + " ")
      reference_pos.write("\n")
    reference_pos.close()  

    PosBleu = Bleu (self.generated_file_path, self.reference_file_path,self.gram)
    #print("PosBleu score with gram = %d is: %f" %(self.gram, PosBleu.get_score(is_fast=False)))
    return PosBleu.get_score(is_fast=False)


  def get_metrics(self): 
    BS = self.getBleuScore()
    SBS = self.getSelfBleuScore()
    PBS = self.getPosBleuScore()
    print("Bleu score with gram = %d is: %f" %(self.gram, BS))
    print("SelfBleu score with gram = %d is: %f" %(self.gram, SBS))
    print("PosBleu score with gram = %d is: %f" %(self.gram, PBS))

    ct = datetime.datetime.now()
    date_time = ct.strftime("%m/%d/%Y, %H:%M:%S")
    new_line = "---"+date_time+"---\n"+"   gram: "+str(self.gram)+", references from: "+self.reference_file_path + ":\n   BS: "+str(BS)+"\n   SBS: "+str(SBS)+"\n"+"   PBS: "+str(PBS)+"\n\n" 
    
    metrics = open ("/content/metrics_evaluations.txt", 'a')
    metrics.write(new_line)
    metrics.close()

b = ctrlBleu("/content/generated_file.txt", "/content/sports_20k.txt", 3)

#b.getBleuScore()
#b.getSelfBleuScore()
#b.getPosBleuScore()
b.get_metrics()